Things to consider:
 Separate interface for each method (onEnemyCollision, onNeutralCollision, etc.)
 Using config files for ComplexCollidable
 Using one or the other is fine, you do not have to do both 


// general abstract class that BasicCollidable and ComplexCollidable extend from
public abstract class Collidable {

  public Collidable() {}


  // Update return type can be some sort of record containing health, for example
  public Update collide(Collidable other) {
    if(other.type == enemy) return onEnemyCollision();
    if(other.type == neutral) return onNeutralCollision();
    ...
  }


  protected Update onEnemyCollision(Collidable other);

  protected Update onNeutralCollision(Collidable other);
 
  protected Update onFriendlyCollision(Collidable other);

}

// Used for characters that have complex movements that cannot be defined
// by a basic config file
public abstract class ComplexCollidable {

  public ComplexCollidable(Info configInfo) throws ... {...}

  protected abstract verifyConfigInfo() throws ...; 
}

// example of complex collidable - can put any logic inside each method
// can still have config files to configure basic logic
public class MarioCollidable {

  Record configurationDetails;

  public Mario(Record configurationDetails) throws ... {
     verifyConfigInfo();
     this.configurationDetails = configurationDetails;
  }

  protected Update onEnemyCollision(Collidable other) {...}
  protected Update onNeutralCollision(Collidable other) {...}
  protected Update onFriendlyCollision(Collidable other) {...}

  protected verifyConfigInfo() throws ... {...}
}


// reads in config file to completely configure logic, only supports basic logic
// e.g. can be used for goomba and koopa
public class BasicCollidable {

  Record fileDetails;

  public BasicCollidable(Record fileDetails) throws ... {
     this.configurationDetails = configurationDetails;
  }

  
  protected Update onEnemyCollision(Collidable other) {...}
  protected Update onNeutralCollision(Collidable other) {...}
  protected Update onFriendlyCollision(Collidable other) {...}
}


